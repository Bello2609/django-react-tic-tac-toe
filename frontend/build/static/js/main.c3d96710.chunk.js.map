{"version":3,"sources":["components/board-box.js","utils/functions.js","components/board.js","components/scoreboard.js","App.js","index.js"],"names":["Box","props","className","darkMode","onClick","value","findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","Board","handleBoardRestart","setState","Array","fill","history","xIsNext","state","playerOneName","playerTwoName","index","this","slice","utils","push","status","winner","isFilled","console","log","axios","post","title","text","to","type","onChange","onDarkModeToggle","checked","handleBoxClick","map","move","React","Component","Scoreboard","refreshList","get","then","response","Promise","all","data","historyItem","historyData","scoreboard","catch","error","handleInputChange","event","preventDefault","stateKey","target","dataset","name","stateValue","nameChangeHandler","handleNameValidation","htmlFor","id","data-name","leader","key","App","localStorage","getItem","JSON","parse","handlePlayerNameChange","handleDarkModeToggle","setItem","stringify","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3d96710.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Box = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<button className={props.darkMode?\"board__box board__box-dark\":\"board__box\"} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t)\r\n}\r\n","export function findWinner(boxes) {\r\n\tconst rows = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t]\r\n\r\n\tfor (let i = 0; i < rows.length; i++) {\r\n\t\tconst [a, b, c] = rows[i]\r\n\r\n\t\tif (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\r\n\t\t\treturn boxes[a]\r\n\t\t}\r\n\t}\r\n\r\n\treturn null\r\n}\r\n\r\nexport function areAllBoxesClicked(boxes) {\r\n\tlet count = 0\r\n\r\n\tboxes.forEach(function (item) {\r\n\t\tif (item !== null) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t})\r\n\r\n\tif(count === 9) {\r\n\t\treturn true\r\n\t} else {\r\n\t\treturn false\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { Box } from \"./board-box\";\r\n\r\nimport * as utils from \"../utils/functions\";\r\n\r\nexport class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      boxes: Array(9).fill(null),\r\n      history: [],\r\n      playerOneName: this.props.state.playerOneName,\r\n      playerTwoName: this.props.state.playerTwoName,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleBoxClick(index) {\r\n    const boxes = this.state.boxes.slice();\r\n\r\n    let history = this.state.history;\r\n\r\n    if (utils.findWinner(boxes) || boxes[index]) {\r\n      return;\r\n    }\r\n\r\n    if (utils.areAllBoxesClicked(boxes) === true) {\r\n      return;\r\n    }\r\n\r\n    boxes[index] = this.state.xIsNext ? \"x\" : \"o\";\r\n\r\n    history.push(\r\n      this.state.xIsNext ? this.state.playerOneName : this.state.playerTwoName\r\n    );\r\n\r\n    this.setState({\r\n      boxes: boxes,\r\n      history: history,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  handleBoardRestart = () => {\r\n    this.setState({\r\n      boxes: Array(9).fill(null),\r\n      history: [],\r\n      xIsNext: true,\r\n    });\r\n  };\r\n  async componentDidMount() {\r\n    utils.findWinner(this.state.boxes);\r\n  }\r\n  render() {\r\n    const winner = utils.findWinner(this.state.boxes);\r\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes);\r\n\r\n    let status;\r\n\r\n    if (winner) {\r\n      console.log(9);\r\n      status = `The winner is: ${\r\n        winner === \"x\" ? this.state.playerOneName : this.state.playerTwoName\r\n      }!`;\r\n\r\n      axios.post(\"http://localhost:8000/api/historys/\", {\r\n        title: `${\r\n          winner === \"x\" ? this.state.playerOneName : this.state.playerTwoName\r\n        } won`,\r\n        text: \"\",\r\n      });\r\n    } else if (!winner && isFilled) {\r\n      status = \"Game drawn!\";\r\n\r\n      axios.post(\"http://localhost:8000/api/historys/\", {\r\n        title: `${\"Game drawn\"}`,\r\n        text: \"\",\r\n      });\r\n    } else {\r\n      status = `It is ${\r\n        this.state.xIsNext ? this.state.playerOneName : this.state.playerTwoName\r\n      }'s turn.`;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={this.props.darkMode ? \"view view-dark\" : \"view view--board\"}\r\n      >\r\n        <Link\r\n          to=\"/\"\r\n          className={\r\n            this.props.darkMode\r\n              ? \"board-back-link-dark board-back-link\"\r\n              : \"board-back-link\"\r\n          }\r\n        >\r\n          Go back to scoreboard\r\n        </Link>\r\n\r\n        {/* dark mode switch */}\r\n        <label className=\"switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.onDarkModeToggle}\r\n            checked={this.props.darkMode}\r\n          />\r\n          <span className=\"slider\"></span>\r\n        </label>\r\n\r\n        <div className=\"board-wrapper\">\r\n          <div className=\"board\">\r\n            <h2\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-heading board-heading-dark\"\r\n                  : \"board-heading\"\r\n              }\r\n            >\r\n              {status}\r\n            </h2>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[0]}\r\n                onClick={() => this.handleBoxClick(0)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[1]}\r\n                onClick={() => this.handleBoxClick(1)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[2]}\r\n                onClick={() => this.handleBoxClick(2)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[3]}\r\n                onClick={() => this.handleBoxClick(3)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[4]}\r\n                onClick={() => this.handleBoxClick(4)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[5]}\r\n                onClick={() => this.handleBoxClick(5)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[6]}\r\n                onClick={() => this.handleBoxClick(6)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[7]}\r\n                onClick={() => this.handleBoxClick(7)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[8]}\r\n                onClick={() => this.handleBoxClick(8)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-history\">\r\n            <h2\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-heading board-heading-dark\"\r\n                  : \"board-heading\"\r\n              }\r\n            >\r\n              Moves history:\r\n            </h2>\r\n\r\n            <ul\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-history-list board-history-list-dark\"\r\n                  : \"board-history-list\"\r\n              }\r\n            >\r\n              {this.state.history.length === 0 && (\r\n                <span>No moves to show.</span>\r\n              )}\r\n\r\n              {this.state.history.length !== 0 &&\r\n                this.state.history.map((move, index) => {\r\n                  return (\r\n                    <li key={index}>\r\n                      Move {index + 1}: <strong>{move}</strong>\r\n                    </li>\r\n                  );\r\n                })}\r\n            </ul>\r\n          </div>\r\n\r\n          {winner && (\r\n            <button\r\n              className=\"board__btn btn\"\r\n              onClick={this.handleBoardRestart}\r\n            >\r\n              Start new game\r\n            </button>\r\n          )}\r\n          {!winner && isFilled && (\r\n            <button\r\n              className=\"board__btn btn\"\r\n              onClick={this.handleBoardRestart}\r\n            >\r\n              Start new game\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport class Scoreboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      playerOneName: this.props.state.playerOneName,\r\n      playerTwoName: this.props.state.playerTwoName,\r\n      scoreboard: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.refreshList();\r\n  }\r\n\r\n  refreshList = () => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/historys\")\r\n      .then((response) => {\r\n        Promise.all(\r\n          response.data.map((historyItem) => {\r\n            return historyItem.title;\r\n          })\r\n        ).then((historyData) => {\r\n          this.setState({ scoreboard: historyData });\r\n        });\r\n      })\r\n      .catch((error) => console.error(error));\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    let stateKey = event.target.dataset.name;\r\n    let stateValue = event.target.value;\r\n\r\n    this.setState({\r\n      [stateKey]: stateValue,\r\n    });\r\n\r\n    this.props.nameChangeHandler(stateKey, stateValue);\r\n  };\r\n\r\n  handleNameValidation = (event) => {\r\n    if (\r\n      this.state.playerOneName.length !== 0 &&\r\n      this.state.playerTwoName.length !== 0\r\n    ) {\r\n      return;\r\n    } else {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          this.props.darkMode ? \"view view-dark\" : \"view view--scoreboard\"\r\n        }\r\n      >\r\n        <h1\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__title scoreboard__title-dark\"\r\n              : \"scoreboard__title\"\r\n          }\r\n        >\r\n          Welcome to Jedah\r\n        </h1>\r\n        {/* dark mode switch */}\r\n        <label className=\"switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.onDarkModeToggle}\r\n            checked={this.props.darkMode}\r\n          />\r\n          <span className=\"slider\"></span>\r\n        </label>\r\n\r\n        <h2\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__subtitle scoreboard__subtitle-dark\"\r\n              : \"scoreboard__subtitle\"\r\n          }\r\n        >\r\n          Would you like to play a game?\r\n        </h2>\r\n\r\n        <div className=\"scoreboard__names\">\r\n          <div\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__name-box scoreboard__name-box-dark\"\r\n                : \"scoreboard__name-box\"\r\n            }\r\n          >\r\n            <label htmlFor=\"playerOneName\">Player one name (x):</label>\r\n\r\n            <input\r\n              id=\"playerOneName\"\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"scoreboard__input scoreboard__input-dark\"\r\n                  : \"scoreboard__input\"\r\n              }\r\n              type=\"text\"\r\n              value={this.state.playerOneName}\r\n              onChange={this.handleInputChange}\r\n              data-name=\"playerOneName\"\r\n            />\r\n          </div>\r\n\r\n          <div\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__name-box scoreboard__name-box-dark\"\r\n                : \"scoreboard__name-box\"\r\n            }\r\n          >\r\n            <label htmlFor=\"playerTwoName\">Player two name (o):</label>\r\n\r\n            <input\r\n              id=\"playerTwoName\"\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"scoreboard__input scoreboard__input-dark\"\r\n                  : \"scoreboard__input\"\r\n              }\r\n              type=\"text\"\r\n              value={this.state.playerTwoName}\r\n              onChange={this.handleInputChange}\r\n              data-name=\"playerTwoName\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <Link\r\n          to=\"/board\"\r\n          onClick={this.handleNameValidation}\r\n          className=\"scoreboard__btn btn\"\r\n        >\r\n          Start new game\r\n        </Link>\r\n\r\n        <h2\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__subtitle scoreboard__subtitle-dark\"\r\n              : \"scoreboard__subtitle\"\r\n          }\r\n        >\r\n          Recent games:\r\n        </h2>\r\n\r\n        {this.state.scoreboard.length === 0 && (\r\n          <p className={this.props.darkMode ? \"p-dark\" : \"\"}>\r\n            There are no previous games to show.\r\n          </p>\r\n        )}\r\n\r\n        {this.state.scoreboard.length !== 0 && (\r\n          <ul\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__list scoreboard__list-dark\"\r\n                : \"scoreboard__list\"\r\n            }\r\n          >\r\n            {this.state.scoreboard.map((leader, key) => {\r\n              return <li key={key}>- {leader}</li>;\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport { Board } from \"./components/board\";\r\nimport { Scoreboard } from \"./components/scoreboard\";\r\n\r\nimport \"./styles/style.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    playerOneName: \"x\",\r\n    playerTwoName: \"o\",\r\n    darkMode: localStorage.getItem(\"darkmode\")\r\n      ? JSON.parse(localStorage.getItem(\"darkmode\"))\r\n      : false,\r\n  };\r\n\r\n  handlePlayerNameChange = (stateKey, stateValue) => {\r\n    this.setState({\r\n      [stateKey]: stateValue,\r\n    });\r\n  };\r\n\r\n  handleDarkModeToggle = () => {\r\n    const darkMode = !this.state.darkMode;\r\n    localStorage.setItem(\"darkmode\", JSON.stringify(darkMode));\r\n    this.setState({ darkMode });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <Scoreboard\r\n              state={this.state}\r\n              nameChangeHandler={this.handlePlayerNameChange}\r\n              onDarkModeToggle={this.handleDarkModeToggle}\r\n              darkMode={this.state.darkMode}\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Route\r\n          path=\"/board\"\r\n          render={() => (\r\n            <Board\r\n              state={this.state}\r\n              nameChangeHandler={this.handlePlayerNameChange}\r\n              onDarkModeToggle={this.handleDarkModeToggle}\r\n              darkMode={this.state.darkMode}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\n// import * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}