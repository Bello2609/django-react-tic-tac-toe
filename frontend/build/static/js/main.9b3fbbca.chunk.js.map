{"version":3,"sources":["components/board-box.js","utils/functions.js","components/board.js","components/scoreboard.js","App.js","index.js"],"names":["Box","props","className","darkMode","onClick","value","findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","Board","state","Array","fill","history","playerOneName","playerTwoName","xIsNext","room","roomcode","client","W3CWebSocket","handleBoardRestart","setState","send","JSON","stringify","event","index","console","log","this","slice","utils","push","data","message","player","connect","onopen","err","onclose","e","reason","setTimeout","onmessage","parse","status","winner","isFilled","axios","post","title","text","to","type","onChange","onDarkModeToggle","checked","handleBoxClick","map","move","React","Component","Scoreboard","refreshList","get","then","response","Promise","all","historyItem","historyData","scoreboard","catch","error","handleInputChange","preventDefault","stateKey","target","dataset","name","stateValue","nameChangeHandler","handleNameValidation","onPressCreate","roomId","shortid","generate","substring","Swal","fire","position","allowOutsideClick","width","padding","customClass","heightAuto","popup","confirmButton","onPressJoin","input","inputPlaceholder","showCancelButton","confirmButtonColor","confirmButtonText","cancelButton","result","htmlFor","id","placeholder","data-name","disabled","hidden","leader","key","App","localStorage","getItem","handlePlayerNameChange","handleDarkModeToggle","setItem","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b3fbbca.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Box = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<button className={props.darkMode?\"board__box board__box-dark\":\"board__box\"} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t)\r\n}\r\n","export function findWinner(boxes) {\r\n\tconst rows = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t]\r\n\r\n\tfor (let i = 0; i < rows.length; i++) {\r\n\t\tconst [a, b, c] = rows[i]\r\n\r\n\t\tif (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\r\n\t\t\treturn boxes[a]\r\n\t\t}\r\n\t}\r\n\r\n\treturn null\r\n}\r\n\r\nexport function areAllBoxesClicked(boxes) {\r\n\tlet count = 0\r\n\r\n\tboxes.forEach(function (item) {\r\n\t\tif (item !== null) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t})\r\n\r\n\tif(count === 9) {\r\n\t\treturn true\r\n\t} else {\r\n\t\treturn false\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { Box } from \"./board-box\";\r\n\r\nimport * as utils from \"../utils/functions\";\r\n\r\nexport class Board extends React.Component {\r\n  state = {\r\n    boxes: Array(9).fill(null),\r\n    history: [],\r\n    playerOneName: this.props.state.playerOneName,\r\n    playerTwoName: this.props.state.playerTwoName,\r\n    xIsNext: true,\r\n    room: this.props.state.roomcode,\r\n  };\r\n\r\n  client = new W3CWebSocket(\r\n    \"ws://jedah.herokuapp.com/ws/play/\" + this.state.room + \"/\"\r\n  );\r\n\r\n  handleBoxClick(index) {\r\n    console.log(this.state.room);\r\n    const boxes = this.state.boxes.slice();\r\n\r\n    let history = this.state.history;\r\n\r\n    if (utils.findWinner(boxes) || boxes[index]) {\r\n      return;\r\n    }\r\n\r\n    if (utils.areAllBoxesClicked(boxes) === true) {\r\n      return;\r\n    }\r\n\r\n    boxes[index] = this.state.xIsNext ? \"x\" : \"o\";\r\n\r\n    history.push(\r\n      this.state.xIsNext ? this.state.playerOneName : this.state.playerTwoName\r\n    );\r\n\r\n    /////////\r\n\r\n    let data = {\r\n      event: \"MOVE\",\r\n      message: {\r\n        index: boxes,\r\n        player: this.state.xIsNext\r\n          ? this.state.playerOneName\r\n          : this.state.playerTwoName,\r\n\r\n        xIsNext: this.state.xIsNext,\r\n        history: this.state.history,\r\n      },\r\n    };\r\n\r\n    this.client.send(JSON.stringify(data));\r\n    ///////\r\n\r\n    this.setState({\r\n      boxes: boxes,\r\n      history: history,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  handleBoardRestart = () => {\r\n    this.setState({\r\n      boxes: Array(9).fill(null),\r\n      history: [],\r\n      xIsNext: true,\r\n    });\r\n    /////////\r\n\r\n    let data = {\r\n      event: \"END\",\r\n    };\r\n\r\n    this.client.send(JSON.stringify(data));\r\n    ///////\r\n  };\r\n\r\n  async componentDidMount() {\r\n    console.log(this.client);\r\n\r\n    function connect() {\r\n      try {\r\n        this.client.onopen = () => {\r\n          /////////\r\n\r\n          let data = {\r\n            event: \"START\",\r\n            message: \"\",\r\n          };\r\n\r\n          this.client.send(JSON.stringify(data));\r\n          ///////\r\n          console.log(\"WebSocket Client Connected\");\r\n        };\r\n      } catch (err) {\r\n        console.log(err.message);\r\n        <Redirect to=\"/\" />;\r\n      }\r\n    }\r\n\r\n    utils.findWinner(this.state.boxes);\r\n\r\n    this.client.onclose = function (e) {\r\n      console.log(\r\n        \"Socket is closed. Reconnect will be attempted in 1 second.\",\r\n        e.reason\r\n      );\r\n      setTimeout(function () {\r\n        connect();\r\n      }, 1000);\r\n    };\r\n\r\n    this.client.onmessage = (e) => {\r\n      let data = JSON.parse(e.data);\r\n      data = data[\"payload\"];\r\n      let message = data[\"message\"];\r\n      let event = data[\"event\"];\r\n      switch (event) {\r\n        case \"START\":\r\n          this.handleBoardRestart();\r\n          break;\r\n\r\n        case \"MOVE\":\r\n          if (message[\"player\"]) {\r\n            // make_move(message[\"index\"], message[\"player\"]);\r\n            //////////this.handleBoxClick(message[\"index\"]);\r\n            // this.setState({\r\n            //   boxes: message[\"index\"],\r\n            // });\r\n\r\n            //document.getElementById(\"alert_move\").style.display = \"inline\";\r\n\r\n            this.setState((state) => ({\r\n              boxes: message[\"index\"],\r\n              xIsNext: !message[\"xIsNext\"],\r\n              history: message[\"history\"],\r\n            }));\r\n            console.log(message[\"index\"]);\r\n          }\r\n          break;\r\n        default:\r\n          console.log(\"No event\");\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const winner = utils.findWinner(this.state.boxes);\r\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes);\r\n\r\n    let status;\r\n\r\n    if (winner) {\r\n      console.log(9);\r\n      status = `The winner is: ${\r\n        winner === \"x\" ? this.state.playerOneName : this.state.playerTwoName\r\n      }!`;\r\n\r\n      axios.post(\"https://jedah.herokuapp.com/api/historys/\", {\r\n        title: `${\r\n          winner === \"x\" ? this.state.playerOneName : this.state.playerTwoName\r\n        } won`,\r\n        text: \"\",\r\n      });\r\n    } else if (!winner && isFilled) {\r\n      status = \"Game drawn!\";\r\n\r\n      axios.post(\"https://jedah.herokuapp.com/api/historys/\", {\r\n        title: `${\"Game drawn\"}`,\r\n        text: \"\",\r\n      });\r\n    } else {\r\n      status = `It is ${\r\n        this.state.xIsNext ? this.state.playerOneName : this.state.playerTwoName\r\n      }'s turn.`;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={this.props.darkMode ? \"view view-dark\" : \"view view--board\"}\r\n      >\r\n        <Link\r\n          to=\"/\"\r\n          className={\r\n            this.props.darkMode\r\n              ? \"board-back-link-dark board-back-link\"\r\n              : \"board-back-link\"\r\n          }\r\n        >\r\n          Go back to scoreboard\r\n        </Link>\r\n\r\n        {/* dark mode switch */}\r\n        <label className=\"switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.onDarkModeToggle}\r\n            checked={this.props.darkMode}\r\n          />\r\n          <span className=\"slider\"></span>\r\n        </label>\r\n\r\n        <div className=\"board-wrapper\">\r\n          <div className=\"board\">\r\n            <h2\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-heading board-heading-dark\"\r\n                  : \"board-heading\"\r\n              }\r\n            >\r\n              {status}\r\n            </h2>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[0]}\r\n                onClick={() => this.handleBoxClick(0)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[1]}\r\n                onClick={() => this.handleBoxClick(1)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[2]}\r\n                onClick={() => this.handleBoxClick(2)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[3]}\r\n                onClick={() => this.handleBoxClick(3)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[4]}\r\n                onClick={() => this.handleBoxClick(4)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[5]}\r\n                onClick={() => this.handleBoxClick(5)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n              <Box\r\n                value={this.state.boxes[6]}\r\n                onClick={() => this.handleBoxClick(6)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[7]}\r\n                onClick={() => this.handleBoxClick(7)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n\r\n              <Box\r\n                value={this.state.boxes[8]}\r\n                onClick={() => this.handleBoxClick(8)}\r\n                darkMode={this.props.darkMode}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-history\">\r\n            <h2\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-heading board-heading-dark\"\r\n                  : \"board-heading\"\r\n              }\r\n            >\r\n              Moves history:\r\n            </h2>\r\n\r\n            <ul\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"board-history-list board-history-list-dark\"\r\n                  : \"board-history-list\"\r\n              }\r\n            >\r\n              {this.state.history.length === 0 && (\r\n                <span>No moves to show.</span>\r\n              )}\r\n\r\n              {this.state.history.length !== 0 &&\r\n                this.state.history.map((move, index) => {\r\n                  return (\r\n                    <li key={index}>\r\n                      Move {index + 1}: <strong>{move}</strong>\r\n                    </li>\r\n                  );\r\n                })}\r\n            </ul>\r\n          </div>\r\n\r\n          {winner && (\r\n            <button\r\n              className=\"board__btn btn\"\r\n              onClick={this.handleBoardRestart}\r\n            >\r\n              Start new game\r\n            </button>\r\n          )}\r\n          {!winner && isFilled && (\r\n            <button\r\n              className=\"board__btn btn\"\r\n              onClick={this.handleBoardRestart}\r\n            >\r\n              Start new game\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from \"shortid\";\r\n\r\nexport class Scoreboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      playerOneName: this.props.state.playerOneName,\r\n      playerTwoName: this.props.state.playerTwoName,\r\n      scoreboard: [],\r\n      roomcode: this.props.state.roomcode,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.refreshList();\r\n  }\r\n\r\n  refreshList = () => {\r\n    axios\r\n      .get(\"https://jedah.herokuapp.com/api/historys\")\r\n      .then((response) => {\r\n        Promise.all(\r\n          response.data.map((historyItem) => {\r\n            return historyItem.title;\r\n          })\r\n        ).then((historyData) => {\r\n          this.setState({ scoreboard: historyData });\r\n        });\r\n      })\r\n      .catch((error) => console.error(error));\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    let stateKey = event.target.dataset.name;\r\n    let stateValue = event.target.value;\r\n    console.log(this.state.roomcode);\r\n    this.setState({\r\n      [stateKey]: stateValue,\r\n    });\r\n\r\n    this.props.nameChangeHandler(stateKey, stateValue);\r\n    console.log(\"me\");\r\n  };\r\n\r\n  handleNameValidation = (event) => {\r\n    if (\r\n      this.state.playerOneName.length !== 0 &&\r\n      this.state.playerTwoName.length !== 0\r\n    ) {\r\n      return;\r\n    } else {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n  ////////////////////////////////////\r\n  // Open the modal\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    // Create a random name for the channel\r\n    const roomId = shortid.generate().substring(0, 5);\r\n\r\n    // Open the modal\r\n    Swal.fire({\r\n      position: \"top\",\r\n      allowOutsideClick: false,\r\n      title: \"Share this Game ID with your friend\",\r\n      text: roomId,\r\n      width: 275,\r\n      padding: \"0.7em\",\r\n      // Custom CSS\r\n      customClass: {\r\n        heightAuto: false,\r\n        title: \"title-class\",\r\n        popup: \"popup-class\",\r\n        confirmButton: \"button-class\",\r\n      },\r\n    });\r\n\r\n    this.setState({\r\n      roomcode: roomId,\r\n    });\r\n    this.props.nameChangeHandler(\"roomcode\", roomId);\r\n  };\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n    Swal.fire({\r\n      position: \"top\",\r\n      input: \"text\",\r\n      allowOutsideClick: false,\r\n      inputPlaceholder: \"Enter the Game ID\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"rgb(208,33,41)\",\r\n      confirmButtonText: \"OK\",\r\n      width: 275,\r\n      padding: \"0.7em\",\r\n      customClass: {\r\n        heightAuto: false,\r\n        popup: \"popup-class\",\r\n        confirmButton: \"join-button-class \",\r\n        cancelButton: \"join-button-class\",\r\n      },\r\n    }).then((result) => {\r\n      // Check if the user typed a value in the input field\r\n      if (result.value) {\r\n        console.log(result.value);\r\n        this.setState({\r\n          roomcode: result.value,\r\n        });\r\n        this.props.nameChangeHandler(\"roomcode\", result.value);\r\n      }\r\n    });\r\n  };\r\n  ///////////////////////////////////\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          this.props.darkMode ? \"view view-dark\" : \"view view--scoreboard\"\r\n        }\r\n      >\r\n        <h1\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__title scoreboard__title-dark\"\r\n              : \"scoreboard__title\"\r\n          }\r\n        >\r\n          Welcome to Jedah\r\n        </h1>\r\n        {/* dark mode switch */}\r\n        <label className=\"switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.onDarkModeToggle}\r\n            checked={this.props.darkMode}\r\n          />\r\n          <span className=\"slider\"></span>\r\n        </label>\r\n\r\n        <h2\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__subtitle scoreboard__subtitle-dark\"\r\n              : \"scoreboard__subtitle\"\r\n          }\r\n        >\r\n          Would you like to play a game?\r\n        </h2>\r\n        <div\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__name-box scoreboard__name-box-dark\"\r\n              : \"scoreboard__name-box\"\r\n          }\r\n        >\r\n          <label htmlFor=\"playerTwoName\">gameid:</label>\r\n\r\n          <input\r\n            id=\"roomcode\"\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__input scoreboard__input-dark\"\r\n                : \"scoreboard__input\"\r\n            }\r\n            type=\"text\"\r\n            value={this.state.roomcode}\r\n            placeholder=\"input 4 digit gameid\"\r\n            onChange={this.handleInputChange}\r\n            data-name=\"roomcode\"\r\n            disabled={this.state.roomcode.length > 3 ? true : false}\r\n            hidden={true}\r\n          />\r\n        </div>\r\n        <br></br>\r\n\r\n        <div className=\"scoreboard__names\">\r\n          <div\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__name-box scoreboard__name-box-dark\"\r\n                : \"scoreboard__name-box\"\r\n            }\r\n          >\r\n            <label htmlFor=\"playerOneName\">Player one name (x):</label>\r\n\r\n            <input\r\n              id=\"playerOneName\"\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"scoreboard__input scoreboard__input-dark\"\r\n                  : \"scoreboard__input\"\r\n              }\r\n              type=\"text\"\r\n              value={this.state.playerOneName}\r\n              //onChange={this.handleInputChange}\r\n              disabled={true}\r\n              data-name=\"playerOneName\"\r\n            />\r\n          </div>\r\n\r\n          <div\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__name-box scoreboard__name-box-dark\"\r\n                : \"scoreboard__name-box\"\r\n            }\r\n          >\r\n            <label htmlFor=\"playerTwoName\">Player two name (o):</label>\r\n\r\n            <input\r\n              id=\"playerTwoName\"\r\n              className={\r\n                this.props.darkMode\r\n                  ? \"scoreboard__input scoreboard__input-dark\"\r\n                  : \"scoreboard__input\"\r\n              }\r\n              type=\"text\"\r\n              value={this.state.playerTwoName}\r\n              // onChange={this.handleInputChange}\r\n              disabled={true}\r\n              data-name=\"playerTwoName\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.roomcode.length <= 0 ? (\r\n          <div className=\"button-container\">\r\n            <button\r\n              className=\"create-button scoreboard__btn btn \"\r\n              onClick={(e) => this.onPressCreate()}\r\n            >\r\n              {\" \"}\r\n              Create\r\n            </button>\r\n            <button\r\n              className=\" scoreboard__btn btn\"\r\n              onClick={(e) => this.onPressJoin()}\r\n            >\r\n              {\" \"}\r\n              Join\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <Link\r\n            to=\"/board\"\r\n            onClick={this.handleNameValidation}\r\n            className=\"scoreboard__btn btn\"\r\n          >\r\n            Start new game\r\n          </Link>\r\n        )}\r\n\r\n        <h2\r\n          className={\r\n            this.props.darkMode\r\n              ? \"scoreboard__subtitle scoreboard__subtitle-dark\"\r\n              : \"scoreboard__subtitle\"\r\n          }\r\n        >\r\n          Recent games:\r\n        </h2>\r\n\r\n        {this.state.scoreboard.length === 0 && (\r\n          <p className={this.props.darkMode ? \"p-dark\" : \"\"}>\r\n            There are no previous games to show.\r\n          </p>\r\n        )}\r\n\r\n        {this.state.scoreboard.length !== 0 && (\r\n          <ul\r\n            className={\r\n              this.props.darkMode\r\n                ? \"scoreboard__list scoreboard__list-dark\"\r\n                : \"scoreboard__list\"\r\n            }\r\n          >\r\n            {this.state.scoreboard.map((leader, key) => {\r\n              return <li key={key}>- {leader}</li>;\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport { Board } from \"./components/board\";\r\nimport { Scoreboard } from \"./components/scoreboard\";\r\n\r\nimport \"./styles/style.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    playerOneName: \"x\",\r\n    playerTwoName: \"o\",\r\n    darkMode: localStorage.getItem(\"darkmode\")\r\n      ? JSON.parse(localStorage.getItem(\"darkmode\"))\r\n      : false,\r\n    roomcode: \"\",\r\n  };\r\n\r\n  handlePlayerNameChange = (stateKey, stateValue) => {\r\n    this.setState({\r\n      [stateKey]: stateValue,\r\n    });\r\n  };\r\n\r\n  handleDarkModeToggle = () => {\r\n    const darkMode = !this.state.darkMode;\r\n    localStorage.setItem(\"darkmode\", JSON.stringify(darkMode));\r\n    this.setState({ darkMode });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <Scoreboard\r\n              state={this.state}\r\n              nameChangeHandler={this.handlePlayerNameChange}\r\n              onDarkModeToggle={this.handleDarkModeToggle}\r\n              darkMode={this.state.darkMode}\r\n              roomcode={this.state.roomcode}\r\n            />\r\n          )}\r\n        />\r\n\r\n        <Route\r\n          path=\"/board\"\r\n          render={() => (\r\n            <Board\r\n              state={this.state}\r\n              nameChangeHandler={this.handlePlayerNameChange}\r\n              onDarkModeToggle={this.handleDarkModeToggle}\r\n              darkMode={this.state.darkMode}\r\n              roomcode={this.state.roomcode}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\n// import * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}